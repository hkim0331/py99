({:problem
  "[extra] extra の100 番以降はアブノーマルな、あるいは笑える回答を求む。あるいは問題が一段、難しくなってる。 n から m の整数のうち、奇数だけの和を求める関数 sum_odds(n,m). アブな回答、求む。(fix: sum_odd( ) → sum_odds())",
  :test
  "def test_sum_odds():\r\n    assert sum_odds(10,20) == 75\r\n    assert sum_odds(10,100) + sum_evens(10,100)== sum(range(10,101))\r\n"}
 {:problem
  "[extra] 正負の数 x の絶対値を返す関数 my_abs(x). 組み込み関数の abs( ) を使わずに。100 番以降はアブノーマルな回答とか、 笑える回答、難しい問題です。if x>0: return x else: return -x みたいなのは求める回答ではない。",
  :test
  "def test_my_abs():\r\n  assert my_abs(0) == 0\r\n  assert my_abs(-1) == 1\r\n  assert my_abs(10) == 10\r\n  assert my_abs(-100) == 100\r\n  # assert my_abs(-1000) == 3000"}
 {:problem
  "プログラム中の掛け算の回数を数える関数 count_times(a,b) を作ってください。 掛け算 a * b の代わりに count_time(a,b) で 「aかける b」を計算するとともに、「掛け算一回」をグローバル変数に記録します。",
  :test ""}
 {:problem
  "n^m と同じことを計算する my_power(n, m) を再定義してください。 my_power(n,m) を計算するのに必要な掛け算をできるだけ少なくすること。 何回掛け算しますか？",
  :test ""}
 {:problem
  "[extra] my_range(x, y, step) を定義してください。関数 range( ) と似てるが、my_range(x, y, step) は x 以上 y 未満の step ごとのリストを返します。my_range(1, 2, 0.3) は [1.0, 1.3, 1.6] みたいなリストを返します。みたいな、っつうのは 1.3 とかが 1.30000001 になってもいいやってこと。P-49 などで利用できるはず。（ライブラリ numpy には同様の関数が見つかります。）",
  :test ""}
 {:problem
  "リスト xs の長さを調べるに len(xs) がある。len(xs) と同じ答えを返す関数 my_len(xs) をできるだけ多くの方法で定義してみよ。 へんてこりんな、みんなが思いつかないようなアルゴリズムが望まれる。",
  :test
  "def test_p105():\r\n  assert my_len([])==0\r\n  assert my_len([1])==1\r\n  assert my_len([[1]])==1\r\n  assert my_len(range(10))==10\r\n  assert my_len([{1,2,3}, [4,5,6], (7,8,9)])==3\r\n  assert my_len([1,1,1,1,1]) == 5"}
 {:problem
  "[extra] 1 ~ nまでの全ての整数で割りれる最小の正整数を求めてください。(89 と被ったので変更 2023-01-10)",
  :test
  "def test_p106():\r\n  for n in [20,30,40]:\r\n    x = p106(n)\r\n    assert all(map(lambda y: x%y == 0, range(1,n)))\r\n"}
 {:problem
  "[extra] 2095632000 の約数の和をできるだけ短い時間で求めてください。答えは 9904265280 になるはずです。 単純に割り切る数をループで足していったら、replit で 26 秒かかりました。",
  :test ""}
 {:problem
  "[extra] クラスに誕生日の同じ人は何人いますか？ ひとクラス 60 人とします。この問題を解くのに何が必要でしょう？ プログラムにならなくても、解くための方法、思いついたら QA に。",
  :test ""}
 {:problem
  "[extra, 一昨年からの連発] n を整数とする。factorial(n) + 2 が立方数となるような n を全て求めよ。",
  :test "def test_p109():\r\n  assert p109()==3\r\n"}
 {:problem
  "[extra] リスト [[x1, x2, ..., xn],[y1, y2, ..., yn]] からリスト [[x1,y1], [x2, y2], ..., [xn, yn]] を作る関数 transpose( ).  テストコードも考えること。 これ、P-77 の zip( ) でした。 一般化しよう。 N x M 行列 を模倣した python ２重リストを M x N の python ２重リストに変換する関数 transpose( ) を作ってください。",
  :test
  "from random import sample\r\n\r\ndef test_transpose():\r\n  assert transpose([[1,2,3]]) == [[1],[2],[3]]\r\n  assert transpose([[1,2,3],[4,5,6]]) == [[1,4],[2,5],[3,6]]\r\n  m = [sample(range(10),5) for _ in range(4)]\r\n  assert transpose(transpose(m)) == m\r\n"}
 {:problem
  "[extra] ファイル fname を開き、そのファイルに、#include \"別のファイル名\" の行があったら、「別のファイル」の内容を #include 行に展開した文字列を戻す expand_include(fname). Py99 に使いたい。コピペの代わりに #include で自分の定義済み関数を引っ張る。#include 先でさらに #include が見つかる場合にも対応できるとグッド！ ",
  :test ""}
 {:problem "[extra] s.split( ) と同じ動作をする my_split(s) を作ってください。",
  :test
  "def test_mysplit():\r\n  for s in [\"abc\", \"a b c d\", \"All My Loving\", \"Honesty is hardly ever heard\", \"pi != 3.14\"]:\r\n    assert my_split(s) == s.split()"}
 {:problem
  "[extra] py99 の回答 s を文字列で受け取り、関数コメント(docstring)を剥ぎ取った文字列を返す関数 strip_docstring(s).",
  :test ""}
 {:problem
  "[extra] sum( ) を自作してください。 my_sum(range(10), 0) は 45 を返し、 my_sum([[0],[1],[2],[3],[4]], [ ]) は [0, 1, 2, 3, 4] を返す。 ",
  :test
  "def test_my_sum():\r\n  assert my_sum(range(10), 0) == 45\r\n  assert my_sum([[0],[1],[2],[3],[4]], [ ]) == [0, 1, 2, 3, 4]"}
 {:problem
  "[extra] is_sorted(xs). xs がソートされていたら（順番に並んでいたら）True、そうでなければ False を返す。",
  :test ""}
 {:problem
  "[extra,easy] 整数引数をとる ipower(x, y). ipower(10, -1) は 0.1 を返すように。",
  :test ""}
 {:problem
  "[extra] partition_with_step(n, step, xs). xs を n 個ずつのサブリストに分けたリストを返す。ただし、その際、オフセットを step とする。 問題がストレンジか。 partition_with_step(2,1,[1,2,3,4,5]) の戻り値は [[1,2],[2,3],[3,4],[4,5]],  partition_with_step(3,1,[1,2,3,4,5]) の戻り値は [[1,2,3],[2,3,4],[3,4,5]]. partition_with_step(2,2,[1,2,3,4,5]) の戻り値は partitiion(2, [1,2,3,4,5]) と同じ。",
  :test
  "def test_partition_with_step():\r\n  rng = [1,2,3,4,5]\r\n  assert partition_with_step(2,1,[])  == []\r\n  assert partition_with_step(2,1,rng) == [[1,2],[2,3],[3,4],[4,5]]\r\n  assert partition_with_step(3,1,rng) == [[1,2,3],[2,3,4],[3,4,5]]\r\n  assert partition_with_step(2,2,rng) == [[1,2],[3,4]]\r\n"}
 {:problem
  "[exra] partition_with_same(xs). xs をスキャンし、同じ要素ごとにまとめる。partition_with_same([3, 3, 3, 'a', 'a', 1, 'b', 'b', 'b'])は [[3,3,3],['a','a'],[1],['b','b']] を返す。compress( ) の定義にこれあると便利だった。",
  :test
  "def test_partition_with_same():\r\n  assert partition_with_same([]) == []\r\n  assert partition_with_same(list(range(5))) == \\\r\n    [[0],[1],[2],[3],[4]]\r\n  assert partition_with_same([3, 3, 3, 'a', 'a', 1, 'b', 'b', 'b']) == \\\r\n    [[3, 3, 3], ['a', 'a'], [1], ['b', 'b', 'b']]\r\n  assert partition_with_same([3,3,3,2,2,2,3,3,3]) == \\\r\n    [[3,3,3],[2,2,2],[3,3,3]]"}
 {:problem
  "def を一切使わずに関数 add1(n) を定義してください。add1(3) は 4、add1(4) は 5 を返す普通の関数です。(fix typo, 2023-01-21)",
  :test
  "def test_p119():\r\n  assert add1(3) == 4\r\n  assert add1(4) == 5\r\n  assert add1(-1) == 0\r\n  assert add1(999) == 1000\r\n  assert add1(add1(add1(0)))==3"}
 {:problem "二つの数 x,y の小さい方を返す関数 min2(x,y) を定義しなさい。 ",
  :test
  "# from src.p211 import *\n\ndef test_min2():\n  assert min2(1,2) == 1\n  assert min2(2,1) == 1\n  assert min2(2,2) == 2\n"}
 {:problem
  "上で定義した min2( ) を利用し、４つの数、x,y,z,w の最小値を返す関数 min4(x,y,z,w)を定義しなさい。 ",
  :test
  "# from src.p212 import *\n\ndef test_min4():\n  assert min4(1,2,3,4) == 1\n  assert min4(2,1,4,3) == 1\n  assert min4(2,2,3,3) == 2\n"}
 {:problem
  "chars = \"abcdefghijklmnopqrstuvwxyz \" とする。z の後ろにスペースがあることに注意。chars[0] は \"a\", chars[1] は \"b\" である。chars[8]は \"i\", chars[26] は \" \". リスト [8, 26, 11, 14, 21, 4, 26, 24, 14, 20] をこの調子で変換し、さらに文字列に変換すると \"i love you\" になる。この整数リストから文字列への変換を行う関数 decrypt(xs) を定義せよ。ちなみに decrypt([0,15,15,11,4]) の戻り値は \"apple\" になる。 ",
  :test
  "# from src.p213 import *\n\ndef test_decrypt():\n  assert decrypt([8, 26, 11, 14, 21, 4, 26, 24, 14, 20])==\"i love you\"\n  assert decrypt([0,15,15,11,4])== \"apple\"\n  assert decrypt([0,1,2,3,4]) == \"abcde\"\n  assert decrypt([0,26,1,26,2]) == \"a b c\"\n"}
 {:problem
  "前問の逆関数が問題。すなわち、chars = \"abcdefghijklmnopqrstuvwxyz \" とする。z の後ろにスペースがあることに注意を前提に、\"i love you\" を引数に与えると、 リスト [8, 26, 11, 14, 21, 4, 26, 24, 14, 20] を返す関数 encrypt(s) を定義せよ。 ちなみに encrypt(\"orange\") の戻り値は [14, 17, 0, 13, 6, 4] になる。 ",
  :test
  "# from src.p214 import *\n\ndef test_encrypt():\n  assert encrypt(\"i love you\") == [8, 26, 11, 14, 21, 4, 26, 24, 14, 20]\n  assert encrypt(\"apple\") == [0,15,15,11,4]\n  assert encrypt(\"abcde\") == [0,1,2,3,4]\n  assert encrypt(\"a b c\") == [0,26,1,26,2]\n"}
 {:problem "整数リスト xs を引数とし、偶数だけを抜き出したリストを返す関数 evens_only(xs) を定義せよ。 ",
  :test
  "# from src.p221 import *\n\ndef test_evens_only():\n  assert evens_only(range(10)) == list(range(0,10,2))\n  assert evens_only(range(1, 10, 2)) == []\n"}
 {:problem
  "整数リスト xs を引数とし、[非負の整数のリスト, 負の整数のリスト]を返す関数 pos_neg(xs) を定義せよ。 pos_neg([-5,2,3,0,4,8,-1,-2]) は [[2,3,0,4,8],[-5,-1,-2]] を返す。 ",
  :test
  "# from src.p222 import *\n\ndef test_pos_neg():\n  assert pos_neg([-5,2,3,0,4,8,-1,-2]) == [[2,3,0,4,8],[-5,-1,-2]]\n  assert pos_neg(range(-3, 3)) == [[0,1,2], [-3,-2,-1]]\n  assert pos_neg(range(1,5)) == [[1,2,3,4], []]\n  assert pos_neg([]) == [[], []]\n"}
 {:problem
  "数のリスト xs と数 y を引数に取り、xs の中で最も y に近い数をリストで返す関数 nearest(xs, y) を定義せよ。 ",
  :test
  "# from src.p223 import *\n\n# test1 == 0 でまるつけてしまったのをバツにしない。\n# test2 も同様。\ndef test_nearest():\n  test1 = nearest(range(-3,3), 0)\n  assert (test1 == 0) or (test1 == [0])\n  test2 = nearest(range(-100,100,3), 40)\n  assert (test2== 41) or (test2 == [41])\n"}
 {:problem
  "「江戸時代までは、1日の時刻を、 子・丑・寅・卯・辰・巳・午・未・申・酉・戌･亥 の十二支で表していました。 子（ね）の刻は、現在の時間に直すと、午前0時を中心とする2時間、 すなわち前日の午後11時から当日の午前1時までを指し、 丑（うし）の刻は午前1時から午前3時まで、 というように、2時間刻みで順番に十二支を当てはめていたのです。」整数 h を引数に取り、 それを江戸時代までの時刻呼びで返す関数 old_time(h) を定義せよ。 午前１時は \"丑の刻\", 午前３時は \"寅の刻\" とせよ。 引数 h が 0~23 以外の時は例外を上げること。 ",
  :test
  "# from src.p224 import *\n\ndef test_old_time():\n  assert old_time(0)  == '子の刻'\n  assert old_time(2)  == '丑の刻'\n  assert old_time(12) == '午の刻'\n  import pytest\n  with pytest.raises(Exception):\n    assert old_time(100) == None\n"}
 {:problem
  "整数のリスト xs から 0 だけを抜き出してリストで返す関数 find_zero(xs) を定義せよ。find_zero([1,2,3,0,1,2,3,0]) は [0,0] を返す。 ",
  :test
  "# from src.p231 import *\n\ndef test_find_zero():\n  assert find_zero([1,2,3,0,1,2,3,0]) == [0,0] \n  assert find_zero(range(10,20))  == []\n  assert find_zero([0,0,0,0,0]) == [0,0,0,0,0]\n"}
 {:problem "整数リスト xs 中に一度しか現れない数を抜き出してリストで返す関数 lonely(xs)を定義せよ。 ",
  :test
  "# from src.p232 import *\n\ndef test_lonely():\n  assert lonely(range(5)) == [0,1,2,3,4]\n  assert lonely([1,1,2,2,3,3,4,4]) == []\n  assert lonely('apple')==['a','l','e']\n"}
 {:problem "整数リスト xs に現れる頻度が最も少ない数をリストで返す関数 rare(xs) を定義せよ。 ",
  :test
  "# from src.p233 import *\n\n# def test_rare():\n#   assert rare(range(5)) == [0,1,2,3,4]\n#   assert rare([1,1,2,2,3,3,4,4,4]) == [1,1,2,2,3,3]\n#   assert rare('apple')==['a','l','e']\n#   assert rare([0,0,0]) == [0,0,0]\n\ndef test_rare():\n  assert rare(range(5)) == [0,1,2,3,4]\n  assert (rare([1,1,2,2,3,3,4,4,4]) == [1,1,2,2,3,3] or rare([1,1,2,2,3,3,4,4,4])==[1,2,3])\n  assert rare('apple') == ['a','l','e']\n  assert (rare([0,0,0]) == [0,0,0] or rare([0,0,0]) == [0])\n"}
 {:problem
  " 平年の 1 月 1 日からの通算日数 n を引数とし、その日を文字列 \"月/日\" で返す関数 month_day(n). month_day(0) = \"1/1\", month_day(100) = \"4/11\" のはず。 異常な n を引数で呼ばれた時は例外を投げろ。 ",
  :test
  "# from src.p234 import *\n\ndef test_month_day():\n  month_day(0)==\"1/1\"\n  month_day(1)==\"1/2\"\n  month_day(2)==\"1/3\"\n  month_day(100)==\"4/11\"\n  month_day(200)==\"7/20\"\n"}
 {:problem
  "整数 x, y を引数とし、x から y までの整数(yを含む)の積を返す関数 mul_int(x,y)を定義せよ。 ",
  :test
  "# from src.p241 import *\n\ndef test_mul_int():\n  assert mul_int(0,100) == 0\n  assert mul_int(1,6) == 720\n  assert mul_int(1,10) == 3628800\n"}
 {:problem
  "'One Two Three Four' のような文字列を引数とし、各単語の最終文字を文字列で返す関数 laitini(s) を定義せよ。laitini('One Two Tree Four') の戻り値は 'eoer' になる。 ",
  :test
  "# from src.p242 import *\r\n\r\ndef test_laitini():\r\n  assert laitini('One Two Tree Four') == 'eoer'\r\n  assert laitini('a b c') == 'abc'\r\n  assert laitini('123 234 345 456') == '3456'\r\n"}
 {:problem
  "足し算 1/1 + 1/2 + 1/3 + ... + 1/n + を続け、その和が初めて m を超える時の n を返す関数 over(m) を定義せよ。 ",
  :test
  "# from src.p243 import *\n\ndef test_over():\n  assert over(2)==4\n  assert over(3)==11\n  assert over(4)==31\n  assert over(5)==83\n"}
 {:problem
  "整数 n を引数とし、それを３桁ごとにコンマを入れた文字列を返す関数 commas(n) を定義せよ。 print( ) を使うのはもちろん反則。commas(1234567) は \"1,234,567\" を返す。 ",
  :test
  "# from src.p244 import *\n\ndef test_commas():\n  assert commas(1)==\"1\"\n  assert commas(12)==\"12\"\n  assert commas(123)==\"123\"\n  assert commas(1234)==\"1,234\"\n  assert commas(123456)==\"123,456\"\n  assert commas(1234567)==\"1,234,567\"\n  assert commas(1234567890)==\"1,234,567,890\"\n"}
 {:problem "整数のリスト xs から 0 を除いたリストを返す関数 remove_zero(xs) を定義しなさい。 ",
  :test
  "# from src.p251 import *\n\ndef test_remove_zero():\n  assert remove_zero(range(5)) == [1,2,3,4]\n  assert remove_zero(range(1,5)) == [1,2,3,4]\n  assert remove_zero([0,0,0,0]) == []\n"}
 {:problem "浮動小数点数リスト xs から最小値、最大値を外した平均値を返す関数 judge(xs) を定義しなさい。 ",
  :test
  "# from src.p252 import *\n\ndef test_judge():\n  assert judge([0,3,3,3,4]) == 3\n  assert judge(range(10)) == 4.5\n"}
 {:problem
  "平面三角形の頂点の座標 a,b,c を引数にとり、その三角形の重心の座標を返す関数 cg(a,b,c) を定義しなさい。 ",
  :test
  "# from src.p253 import *\n\ndef test_cg():\n  assert cg((0,0),(2,2),(1,1))==(1.0,1.0)\n"}
 {:problem "9x^3^ - 15x^2^ - 8x + 4 = 0 の -1 < x < 1 における数値解を求めよ。 ",
  :test
  "# from src.p254 import *\n\ndef f(x):\n  return 9*x**3 - 15*x**2 - 8*x + 4\ndef test_find_zero():\n  ret = find_zero(f,-1,1,0.1)\n  assert abs(ret[0]+2/3)<0.1 and abs(ret[1]-1/3)<0.1\n"}
 {:problem
  "整数 x, y を引数とし、x から y までの整数(yを含む)の積を返す関数 mul_int(x,y)を定義せよ。 ",
  :test
  "# from src.p241 import *\n\ndef test_mul_int():\n  assert mul_int(0,100) == 0\n  assert mul_int(1,6) == 720\n  assert mul_int(1,10) == 3628800\n"}
 {:problem
  "'One Two Three Four' のような文字列を引数とし、各単語の最終文字を文字列で返す関数 laitini(s) を定義せよ。leitini('One Two Tree Four') の戻り値は 'eoer' になる。 ",
  :test
  "# from src.p242 import *\n\ndef test_laitini():\n  assert laitini('One Two Tree Four') == 'eoer'\n  assert laitini('a b c') == 'abc'\n  assert laitini('123 234 345 456') == '3456'\n"}
 {:problem
  "整数のリスト xs から 0 だけを抜き出してリストで返す関数 find_zero(xs) を定義せよ。find_zero([1,2,3,0,1,2,3,0]) は [0,0] を返す。 ",
  :test
  "# from src.p231 import *\n\ndef test_find_zero():\n  assert find_zero([1,2,3,0,1,2,3,0]) == [0,0] \n  assert find_zero(range(10,20))  == []\n  assert find_zero([0,0,0,0,0]) == [0,0,0,0,0]\n"}
 {:problem "整数リスト xs 中に一度しか現れない数を抜き出してリストで返す関数 lonely(xs)を定義せよ。 ",
  :test
  "# from src.p232 import *\n\ndef test_lonely():\n  assert lonely(range(5)) == [0,1,2,3,4]\n  assert lonely([1,1,2,2,3,3,4,4]) == []\n  assert lonely('apple')==['a','l','e']\n"}
 {:problem "二つの数 x,y の小さい方を返す関数 min2(x,y) を定義しなさい。 ",
  :test
  "# from src.p211 import *\n\ndef test_min2():\n  assert min2(1,2) == 1\n  assert min2(2,1) == 1\n  assert min2(2,2) == 2\n"}
 {:problem
  "上で定義した min2( ) を利用し、４つの数、x,y,z,w の最小値を返す関数 min4(x,y,z,w)を定義しなさい。 ",
  :test
  "# from src.p212 import *\n\ndef test_min4():\n  assert min4(1,2,3,4) == 1\n  assert min4(2,1,4,3) == 1\n  assert min4(2,2,3,3) == 2\n"}
 {:problem "整数リスト xs を引数とし、偶数だけを抜き出したリストを返す関数 evens_only(xs) を定義せよ。 ",
  :test
  "# from src.p221 import *\n\ndef test_evens_only():\n  assert evens_only(range(10)) == list(range(0,10,2))\n  assert evens_only(range(1, 10, 2)) == []\n"}
 {:problem
  "整数リスト xs を引数とし、[非負の整数のリスト, 負の整数のリスト]を返す関数 pos_neg(xs) を定義せよ。 pos_neg([-5,2,3,0,4,8,-1,-2]) は [[2,3,0,4,8],[-5,-1,-2]] を返す。 ",
  :test
  "# from src.p222 import *\n\ndef test_pos_neg():\n  assert pos_neg([-5,2,3,0,4,8,-1,-2]) == [[2,3,0,4,8],[-5,-1,-2]]\n  assert pos_neg(range(-3, 3)) == [[0,1,2], [-3,-2,-1]]\n  assert pos_neg(range(1,5)) == [[1,2,3,4], []]\n  assert pos_neg([]) == [[], []]\n"}
 {:problem
  "整数のリスト xs を偶数のリスト、奇数のリストにわけ、それらをリストで返す関数 evens_odds(xs)を定義しなさい。 evens_odds([0,1,2,3,4,5])は [[0,2,4],[1,3,5]] を返す。",
  :test
  "def test_evens_odds():\r\n  assert evens_odds(list(range(6)))== [[0,2,4],[1,3,5]]\r\n  rng = list(range(100))\r\n  assert evens_odds(rng)== \\\r\n    [list(filter(lambda x: x%2==0, rng)),\r\n     list(filter(lambda x: x%2==1, rng))]\r\n"}
 {:problem
  "整数のリスト xs の先頭に要素 e を挿入したリストを返す関数 add_first(xs, e) を定義しなさい。add_first([1,2,3,4,5],0) は [0,1,2,3,4,5] を返す。",
  :test
  "def test_add_first():\r\n  assert add_first([1,2,3,4,5],0) == [0,1,2,3,4,5]\r\n  assert add_first([1,2,3,4,5],[0]) == [[0],1,2,3,4,5]\r\n"}
 {:problem
  "整数のリスト xs から、最初に現れる要素 e を取り除いたリストを返す関数 remove_first(xs, e) を定義しなさい。 remove_first([1,1,1,2,2,2,3,3,3], 2) は [1,1,1,2,2,3,3,3] を返す。 ",
  :test
  "def test_remove_first():\r\n  assert remove_first([1,1,1,2,2,2,3,3,3], 2) == [1,1,1,2,2,3,3,3]\r\n  assert remove_first([1,1,1,2,2,2,3,3,3], 4) == [1,1,1,2,2,2,3,3,3]\r\n"}
 {:problem
  "整数のリスト xs に見つかる e のうち、最後に見つかる e のインデックスを 返す関数 find_last(xs, e) を定義しなさい。 xs 中に e が見つからない時、\"e はありません\" のメッセージで raise すること。 find_last([1,1,1,2,2,2,3,3,3],1) は 2 を返し、 find_last([1,1,1,2,2,2,3,3,3],4) は \"4 はありません\" のメッセージで raise する。",
  :test
  "import pytest\r\n\r\ndef test_find_last():\r\n  assert find_last([1,1,1,2,2,2,3,3,3],1) == 2\r\n  with pytest.raises(Exception) as e:\r\n    ret = find_last([1,1,1,2,2,2,3,3,3],4)\r\n    print(\"ret\", ret)\r\n  assert True\r\n"}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem "", :test ""}
 {:problem
  "[extra] [fast_fibo(x) for x in range(100)]で返るリストが本当に正しいフィボナッチリストになってるかを確認してください。 is_fibo(xs). is_sorted(xs) をイメージしてください。",
  :test ""}
 {:problem
  "1, 整数 p が素数で、かつ、p + 2 が素数であるとき、p を双子素数という。 n が双子素数であることを True/False で返す is_twin_prime(n) を定義しなさい。",
  :test ""}
 {:problem "2, n 未満の双子素数はいくつあるかを返す twin_primes(n) を定義しなさい。", :test ""}
 {:problem
  "3, ある秘密のイメージ secret と乱数イメージ noise から secret[y,x] + noise[y,x] の操作で作ったイメージ hidden がある。 hidden の各ピクセルの BGR 値から noise の対応する各ピクセルの BGR 値を引いて オリジナルの秘密のイメージを取り戻してください。そこにはなんて書いてある？ 左が hidden.png, 右が noise.png です。",
  :test ""}
 {:problem
  "4, 300x200 のウィンドウに、黒から白になめらかに変化する模様を表示し、 gradation.png のファイルにセーブせよ。 b,g,r が (n,n,n) よりも (n+1, n+1, n+1) はちょっと明るい。 見本は次です。",
  :test ""}
 {:problem
  "5, 関数 y = sin(x) は x がゼロに近い時、y = x + x^3^/3! + x^5^/5! +... で近似できる。 (テーラー展開) t(x) = x + x**3/(3*2*1) とし、 |sin(x)-t(x)| を -1 &le; x &lt; 1 の範囲でプロットせよ。 ",
  :test ""}
 {:problem
  "1, hkimura の命名だが、素数 p の桁をひっくり返した数字が素数になる数を逆転素数という。 例えば 13 はひっくり返した 31 も素数なので逆転素数です。 整数 n が逆転素数であることを True/False で返す is_rev_prime(n) を定義しなさい。",
  :test ""}
 {:problem
  "2, n 以上 m 未満の整数で逆転素数は何個ありますか？ rev_primes(n,m) を定義しなさい。 rev_primes(10,1000) は 50 よりも多い。",
  :test ""}
 {:problem
  "3, 次のイメージは人間の目には黒一色だが、見えない違いがあって、明るくすると文字が浮き上がる。 次のイメージをダウンロード、セーブしたファイルを読み、 全てのピクセルの R,G,B 値を 100 倍したイメージを表示する enhance(filename) を定義しなさい。 浮き上がった文字は何か？",
  :test ""}
 {:problem
  "4, 下のイメージを読み、白点の数をコンピュータに数えさせてください。 定義する関数名は count_white(filename). 引数はセーブしたファイルの名前です。 白点は何個ありますか？ 100 個より多い。",
  :test ""}
 {:problem
  "5, y=x^x^を 1 &le; x &lt; 5 の範囲でプロットしなさい。 y の値に log をかけてプロットすること。 ",
  :test ""}
 {:problem
  "1, 一桁の素数を使って四桁の数字を作る。たとえば 2357。これは素数になる。 しかし、2375 は素数じゃない。一桁の素数を使って四桁の数字を作るとき、素数は何個作れるでしょう？",
  :test ""}
 {:problem "2, 二桁の素数を使って四桁の数字を作る。素数になるものは何個あるでしょう？", :test ""}
 {:problem "3, イメージの横一列を Py99 の shuffle() で入れ替えた暗号イメージが以下である。",
  :test ""}
 {:problem
  "4, ウクライナの国旗は上半分に青(255,0,0)、下半分に黄色(0,255,255)です。 関数 ukraine(filename) でウクライナ国旗イメージを作成し、作成したイメージを filename にセーブしなさい。",
  :test ""}
 {:problem
  "5, y = sin(x)^2^ + cos(x)^2^ を -3 &le; x &lt; 3 の範囲でプロットしなさい。 ",
  :test ""}
 {:problem
  "1, 4以上のすべての偶数は二つの素数の和として表されるという。 4 = 2+2, 6 = 3+3, 8 = 2+5, 10 = 3+7,... この問題を解くのだが、 まず、 n 未満の素数のリストを返す関数 primes_under(n) を定義しなさい。",
  :test ""}
 {:problem
  "2, 4 以上の整数 n を引数とし、 それを二つの素数 x と y の和に分解し、(x,y) を戻り値とする関数 divide_even(n) は primes_under(n) の戻したリストがヒントだ。 divide_even(n) を定義しなさい。引数 n が偶数じゃなかった時、どうするんだっけ？",
  :test ""}
 {:problem
  "3, 次のイメージは黒一色だが、隣り合うピクセルがわずかに違うものがある。 次のイメージをダウンロード、セーブしたファイルを読み、 右隣のピクセルの BGR と自分の BGR が同じ時は自分ピクセルを黒、 異なる時は白にする操作で隠れた文字を浮き上がらせなさい。隠れた文字は何か？",
  :test ""}
 {:problem
  "4, 下のイメージ中、真ん中辺に見える白い線の長さはなんピクセルありますか？ blue_length(filename) を定義してください。",
  :test ""}
 {:problem
  "5, y = sin(x)/x を -1 &le;x &lt; 1 の範囲でなめらかにプロットしなさい。 x=0 をまたぐように xs を用意しないと、エラーになるぞ。 ",
  :test ""}
 {:problem
  "0 でない整数 n,m が共通因数を持たないとき、「互いに素」であるという。 n,m が互いに素であるかどうかを返す relative_prime(n,m) を定義しなさい。relative_prime(9,10) は True を返す。 ",
  :test ""}
 {:problem
  "1 以上 100 未満の整数二つのペア (n,m) が互いに素になるものは何組あるか(n &lt; m)を返す relative_primes_under(100).",
  :test ""}
 {:problem
  " 黒ネコがいる。まず、このファイルをダウンロードし、\"cat.png\" の名前でセーブする。 そのファイル名 \"cat.png\" を引数に取り、イメージを読み込んで、 白の背景を黒く染め、\"dark_cat.png\" の名前でセーブする関数 darken(filename). 画像フォーマットの都合で黒猫のエッジがすこーし白く残りますが、残って OK. ",
  :test ""}
 {:problem
  "次の画像 \"bgr.png\" 中、面積が大きい絵柄は赤か青かを判定する関数 red_or_blue(filename). 赤の面積が大きい時は \"red\"、青の面積が大きい時は \"blue\" を返しなさい。",
  :test ""}
 {:problem "x=sin(t), y=sin(2*t) を -8 &le; t &lt; 8 の範囲でプロットしなさい。",
  :test ""}
 {:problem
  "[extra] QA の 911 番をブラウズした人で 910 番を見ない人は誰ですか？ その人の単位は危ないと言っておこう。danger(num1, num2). num1 は 911 をブラウズしたアカウントのリスト、 num2 は910をブラウズしたアカウントのリスト。QA から readers クリックすると表示します。",
  :test ""}
 {:problem
  "[extra] py99 の 97, 98, 99 の回答が 2/13 以降の人のリストを得るにはどうすれば？ その人の 2/13 以前の回答、コメントの数も一緒にゲットしてください。",
  :test ""})
