[;; 小手調べ
 {:problem "'Hello, Python!' を画面にプリントするプログラム。"}

;; {:problem "+, -, *, **, /, //, % はそれぞれ何を計算する演算子か。"}

;; {:problem "1 + 2 を評価すると 3 を返し、123 + 3 は 126 を返す。
;;           '123' + '3' は何を返すか？
;;           '123' * 3 は？
;;           '123' * '3' は？"}

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; difference between `print` and `return`
 {:problem "関数 greeting_( ) を定義しなさい。実行すると文字列の入力待ちになり、
            キーボードで入力した文字列(例えば abc)を使って、
            'Hello, abc' をプリントする。"}

 {:problem "関数 hello_(s) を定義しなさい。
            引数の s は文字列。
            hello_('Japan') は 'Hello, Japan' をプリントする。"}

 {:problem "関数 hello(s) を定義しなさい。
           引数の s は文字列。hello('Japan') は文字列 'Hello, Japan' を返す。"
  :test "def test_hello( ):
  assert hello('Japan') == 'Hello, Japan'
  assert hello('Good bye') == 'Hello, Good bye'"}

 ;; numeric
 {:problem "整数 x, y を引数にとり、それらの和、差、積、商をプリントする関数
            arithmetic_(x, y)."}

 {:problem "数 x, y を引数にとり、
            それらを足した数を戻り値とする関数 add2(x, y)."
  :test "def test_add2( ):
    assert add2(1,2) == 3
    assert add2(-10,-10) == -20
    assert add2(123, 234) == 357
    assert add2(0.0, 0) == 0"}

 {:problem "数 x, y を引数にとり、
            それらを足した数をプリントする関数 add2_(x, y)."}

 {:problem "円の半径を引数にとり、その円の面積を戻り値とする関数en(r)."
  :test "def test_en():
    assert en(1) - 3.14 < 0.01
    assert en(10) - 314 < 1.0
    assert en(-1) == None"}

 {:problem "円の半径をキーボードから読み、
            その円の面積をプリントする関数 en_( )."}

 ;; floating numbers
 {:problem "ax^2 + bx +c==0 の a,b,c を引数に取り、
            2次方程式の解をリストで返す関数 eqn2(a, b, c).
            虚数解の時はどうすっか。"
  :test "def test_eqn2():
  assert set(eqn2(1,-3,2)) == {1,2}
  assert set(eqn2(1,-2,1)) == {1}
  assert set(eqn2(1,-1,-6)) == {-2, 3}"}

 ;; FIXME: test is not enough. in particular, not test.
 {:problem "小数点数 x を四捨五入した整数を返す関数 f_to_i(x).
            注意: python の関数 round( ) だと、
            round(2.5) が 2 になってちょっとまずい。負数にも注意せよ。"
  :test "def test_f_to_i():
  assert f_to_i(0.5) == 1
  assert f_to_i(1.5) == 2
  assert f_to_i(2.5) == 3"}

 {:problem "小数点数 x を小数点第 2 位で四捨五入した数を返す関数 f_to_f1(x).
            f_to_f1(3.14159265) の戻り値は 3.100000 になる"
  :test "def test_f_to_f1():
  assert f_to_f1(3.14159265) == 3.1"}

 {:problem "小数点数 x を小数点第 n+1 位で四捨五入した数を返す関数 f_to_f( x, n).
            f_to_f(3.14159265, 4) の戻り値は 3.141600になる。"
  :test "def test_f_to_f():
  assert f_to_f(3.14159265, 4) == 3.1416"}

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; predicates
 {:problem "整数 x を引数にとり、それが偶数であれば True、
            奇数だったら False を返す関数 is_even(x)."
  :test "def test_is_even( ):
  assert is_even(0)
  assert not is_even(1)
  assert is_even(100)
  assert is_even(-100)
  assert not is_even(-99)"}

 {:problem "キーボードから整数ひとつを入力し、それが偶数だったら '偶数です'、
            奇数だったら '奇数です' とプリントする関数 parity_( )."}

 {:problem "数 x を引数に取り、それが負数だったら -1, ゼロと等しければ 0,
            正数であれば 1 を返す関数 sign(x)."
  :test "def test_sign( )
  assert sign(-100)==-1
  assert sign(0)==0
  assert sign(-0)==0
  assert sign(0.0)==0
  assert sign(3.14)==1"}

 {:problem "彼・彼女の年齢を y とする。彼・彼女がティーンエイジャーだったら True、
            そうでなければ False を返す関数 is_teenage(y)."
  :test "def test_is_teenage( ):
  assert not is_teenage(10)
  assert not is_teenage(12)
  assert not is_teenage(5)
  assert is_teenage(17)
  assert not is_teenage(20)"}

 {:problem "3 つの整数を引数とし、
            それらの長さを各辺とする三角形がありうるかどうかを判定する関数
            is_triangle(x,  y,  z)."
  :test "def test_is_triable():
  assert     is_triangle(1,1,1)
  assert not is_triangle(1,1,0)"}


 {:problem "3 つの整数を引数とし、
            それらの長さを各辺とする直角三角形がありうるかどうかを判定する関数
            is_normal_triangle(x,  y,  z)."}

 ;; calendar
 {:problem "西暦 year を引数にとり昭和、平成、令和の和暦を表す文字列を返す関数
            era(year). era(2022)は '令和4年' を返す。
            1926年、1989年、2019年はそれぞれ
            '昭和元年'、'平成元年'、'令和元年'を返すこと。"
  :test "def test_era( ):
  assert era(1926)=='昭和元年'
  assert era(1989)=='平成元年'
  assert era(2019)=='令和元年'
  assert era(1984)=='昭和59年'
  assert era(2013)=='平成25年'
  assert era(2022)=='令和4年'"}

 {:problem "西暦 year を引数にとり、閏年であれば True、
            そうでなければ False を返す関数 is_leap(year).
            西暦が 4 で割り切れれば閏年。ただし、100 で割り切れる時は平年。
            ただし、400 で割り切れる時は閏年。"
  :test "def test_is_leap( ):
    assert is_leap(2000)
    assert is_leap(2004)
    assert not is_leap(2100)
    assert not is_leap(2022)
    assert is_leap(2024)"}

 {:problem "hh 時 mm 分 ss 秒の hh, mm, ss を引数にとり、
            00 時 00 分 00 秒からの通算秒に変換した整数を戻り値とする関数
            time_to_int(h, m, s)."}

 {:problem "時刻 h1:m1:s1 と 時刻 h2:m2:s2 の間の秒数を整数で返す関数
            sec_between(h1, m1, s1, h2, m2, s2)."}

 {:problem "平年の 1 月 1 日から同年 mm 月 dd 日までの日数を返す関数
            days(mm, dd)."}

 {:problem "y1 年 m1 月 d1 日から y2 年 m2 月 d2 月までの日数を返す関数
            days_between(y1, m1, d1, y2, m2, d2).
            自分は今日まで何日生きてきましたか?"}

 ;; ;; dictionary
 ;; {:problem "月の名前を文字列 s で取り、その月の日数を返す関数 days(s)."}

 ;; iteration, loop
 {:problem "n + (n+1) + ... + m を求める関数 sum_int(n, m).
            sum_int(100, 1000000000) を1秒以内に計算できるか？"
  :test "def test_sum_int():
    assert sum_int(0,10) == 55
    assert sum_int(2,30) == sum_int(0,30)-sum_int(0,1)
    assert sum_int(-10, 10) == 0
    assert 1.0 * sum_int(100, 1000000000) == 1.0 * 500000000499995050"}

 {:problem "n から m の整数のうち、偶数だけの和を求める関数 sum_evens(n, m)"
  :test ""}

 {:problem "整数 n から m までの二乗和を求める関数 sum2(n, m)."}

 {:problem "整数 n を引数とし、それが 3 の倍数だったら 1、
            5 の倍数だったら 2、
            3 の倍数でもあり、かつ、5 の倍数でもあったら 3、
            いずれでもなかったら 0 を返す関数 fz(int n)."
  :test "def test_fz( ):
  assert list(map(fz, range(16))) == [3, 0, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1, 0, 0, 3]"}

 {:problem "fz(1) + fz(2) + ... + fz(n) を求める関数 sum_fz(n)."}

 {:problem "(孫子の問題) 3 で割って 1 余り、5 で割って 2 余り、
           7 で割って 3 余る正の整数の最小のものはなにか？"}

 {:problem "キーボードから複数の整数を入力、
           0 が入力されたらそれまでに入力された整数を合計してプリントする
           関数 sunlive_( ). 関数の名前はspina( )_ あるいは HelloDay_( ) でも良い。"}

 ;; statistics
 {:problem "リスト xs 中の要素の平均値を返す関数 mean(xs).
            numpy.mean を使うのは反則とする。"}

 {:problem "リスト xs の中央値を返す関数 median(xs).
            numpy.median を使うのは反則とする。"}

 {:problem "整数 xs の最頻値を返す関数 mode(xs).
            numpy.mode を使うのは反則とする。"}

 ;; strings
 ;;
 ;; s.replace(s1,s2)
 ;; s.index(s1)
 ;; s.count(s2)
 ;; s.strip( ), lstrip( ), rstrip( )

 ;; C だからあり得た問題。
 ;;{:problem "文字列 s が空文字列 '' かどうかを判定する関数 is_empty(s)."}

 {:problem "文字列 s を逆にした文字列を返す関数 str_reverse(s)."}

 {:problem "文字列 s に含まれる文字 c をリストで返す関数 find_char(s, c).
            find_char('apple','p') は ['p', 'p'] を返す。"}

 {:problem "文字列 s に含まれる文字 c の数を返す関数 count_char(s, c).
            count_char('apple','p') は 2 を返す。"}

 {:problem "文字列 s に含まれる単語の数を返す関数 count_word(s).
            単語はスペースで区切られた文字列。
            count_words('I love you. I need you.') の戻り値は 6."}

 {:problem "'Kimura Takuya' のような文字列 s を引数とし、
           そのイニシャル 'K.T.' を返す関数 initial(s)."}


 ;; define functions using defined functions.
 {:problem "二つの数 x, y のどちらか大きい方を返す関数 max2(x, y).
            ビルトイン関数の max を使うのは反則とする。"
  :teset "def max2(x,y):
  if x>y:
    return x
  else:
    return y"}

 {:problem "三つの数 x, y, z の最大値を返す関数 max3(x, y, z).
           ビルトイン関数の max を使うのは反則とする。"
  :test "def test_max3( ):
  assert max3(1,2,3) == 3
  assert max3(10,20,3) == 20
  assert max3(100,20,30) == 100"}

 {:problem "リスト xs 中の要素の最大値を返す関数 max_in_list(xs).
            ビルトイン関数の max を使うのは反則とする。"
  :test "import random
def test_max_in_list( ):
  assert max_in_list([])==[]
  assert max_in_list([100])==100
  assert max_in_list(range(10))==9
  assert 0 <= max_in_list(random.choices(range(10),k=100)) < 10"}

 {:problem "リスト xs 中の要素の最大値のリストを返す関数 maxen(xs).
            関数 max_in_list(xs) との違いは、
            最大値が複数ある場合にそれらをリストで返すことだ。"
  :test ""}


 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; random numbers
 {:problem "0 <= r < n の整数乱数 m 個のリストを返す関数
            list_randoms(n, m)."
  :test "def test_list_randoms( ):
  xs = list_randoms(10,20)
  ys = list_randoms(10,20)
  assert not xs == ys
  assert len(xs) == 20
  assert len(list(filter(lambda x: x < 0, xs))) == 0
  assert len(list(filter(lambda x: x< 20, xs))) == 20"}

 {:problem "rs = list_randoms(n, m) で作った配列 rs 中にみつからない
            0 <= r < n の数をリストで返す関数 not_found(rs, n)."}

 {:problem "ビンゴゲーム用の bingo(n).
            戻り値は 1 ~ n の n 個の整数が重複なく順番バラバラに入った配列。
            shuffle( ) を使うのは反則としておこう。"}

 {:problem "(モンテカルロメソッド)
            -1 <= x < 1, -1 <= y < 1 となる乱数(x,y)を 1000 個発生させる。
            そのうち、
            x<sup>2</sup>+y<sup>2</sup> &le; 1
            となる (x,y) の数を n とすると、
            n/1000 が円周率 pi に近づく。関数 monte-carlo-pi(m) を定義せよ。
            m は繰り返しの回数。
            m をより大きくすると近似値が良くなることを確認せよ。"}

 {:problem "4/(1+x<sup>2</sup>) を x について 0 から 1 まで積分すると円周率 pi になる。
            できるだけスマートにプログラムし、上のモンテカルロ法で求める pi と
            精度、計算時間を比較せよ。"}

 ;; coercion between int and str
 {:problem "整数 n は何桁かを返す関数 digits(n)."
  :test "def test_digits( ):
  assert digits(12345)==5
  assert digits(0)==1
  assert digits(123450123)==9
  assert digits(24213412414124141412431241414)==29"}

 {:problem "整数 n の各桁の総和を返す関数 sum_of_digits(n)."
  :test "def test_sum_of_digits( ):
  assert sum_of_digits(12345) == 15
  assert sum_of_digits(0) == 0"}

 {:problem "一の位が０でない整数 n の各桁の数字を逆転した整数を返す関数
           reverse_int(n)."
  :test "def test_reverse_int( ):
  for _ in range(10):
    n = random.randrange(100000000)
    if n%10 != 0:
      assert n == reverse_int(reverse_int(n))"}

 {:problem "文字列 s が学生番号かどうかを判定する is_id(s).
            学生番号とは、数字が 3 つの後に、英大文字一つ、
            その後、数字が 4 つの 8 文字からなる文字列。"}

 ;; palindrome
 {:problem "左右どちらから読んでも同じになる文を回文という。
            文字列 s が回文かどうかを判定する関数 is_palindrome(s)."}

 {:problem "左右どちらから読んでも同じ値になる数を回文数という。
            整数 n が回文数かどうかを判定する関数 is_palindrome_number(n)."}

 {:problem "2 桁の数の積で表される回文数のうち、最大のものは 9009 = 91 × 99 である。
            3 桁の数の積で表される回文数の最大値を求めよ"}

 ;; divisors, gcd
 {:problem "正整数 n を引数とし、その約数のリストを返す関数 divisors(n).
            1 とn 自身もn の約数だ(0 を除く)。"
  :test "def test_divisors( ):
  assert divisors(0) == []
  assert divisors(1) == [1]
  assert divisors(10) == [1, 2, 5, 10]
  assert divisors(100) == [1, 2, 4, 5, 10, 20, 25, 50, 100]"}

 {:problem "正整数 n を引数とし、
            その約数の合計を戻り値とする関数 sum_of_divisors(int n)."
  :test "def test_sum_of_divisors( ):
  assert sum_of_divisors(0) == 0
  assert sum_of_divisors(1) == 1
  assert sum_of_divisors(10) == 18
  assert sum_of_divisors(100) == 217"}

 {:problem "n 以下の整数のうち、もっとも約数の多い数を返す関数 most_divisors(n).
            most_divisors(1000)の戻り値は 840."
  :test ""}

 {:problem "math.gcd( ) を使わずに、
           正の整数 x, y の最大公約数を返す関数 gcd2(x, y) を定義しなさい。"
  :test ""}

 {:problem "正の整数 x, y z の最大公約数を返す関数 gcd3(x, y, z) を定義しなさい."
  :test ""}

 {:problem "正の整数のリスト xs を引数に取り、
            xs に含まれる整数すべてのの最大公約数を返す関数 gcd_all(xs)."
  :test ""}

 ;; perfect number
 {:problem "正整数 n が完全数かどうかを判定する関数 is_perfect(n).
            n が完全数であるとは n の約数の総和が 2n と等しくなる数である。"
  :test "def test_is_perfect( ):
  assert list(filter(is_perfect, range(500))) == [0, 6, 28, 496]"}

 {:problem "n よりも大きい完全数を求める関数 next_perfect(n)."
  :test "def test_next_perfect( ):
  assert next_perfect(1)==6
  assert next_perfect(6)==28
  assert next_perfect(28)==496
  assert next_perfect(496)==8128"}

 ;; primes
 {:problem "正の整数 n を引数に取り、n が素数であれば True、
            そうでなければ False を返す関数 is_prime(n)."}

 {:problem "正の整数 n を引数に取り、
            n 以下の素数は何個あるかを戻り値とする関数 primes(n).
            primes(10000) の戻り値はおそらく 1229."}

 {:problem "正数 n を超えない最大の素数を返す関数 max_prime_under(n).
            効率も考えること。"
  :test "def test_max_prime_under( )
  assert max_prime_under(10) == 7
  assert max_prime_under(pow(2,16)) == 6552
  assert max_prime_under(pow(2,31)) == 2147483647"}

 {:problem "正数 n を超えない 2 番目に大きい素数を返す関数 submax_prime_under(n).
            効率も考えること。"}

 {:problem "n 未満の素数の和を求める関数 sum_primes_under(n).
            sum_primes_under(1000) は 76127 のはず。"}

 {:problem "4 番目までの素数を足すと 2 + 3 + 5 + 7 = 17.
            n 番目までの素数を足す sum_primes_nth(n).
            1000 番目までの素数の和を求めなさい。それはたぶん 3682913."}

 {:problem "正の整数 n を素因数分解する関数 factor_integer(n).
            戻り値は素因数のリスト。"}

 {:problem "600851475143 の素因数のうち最大のものを求めよ。
            スピード勝負！2秒を切れるか？"}

 ;; lists
 {:problem "リスト xs の各要素を n 倍したリストを返す関数 times_n(xs, n)."}

 {:problem "リスト xs の偶数番めの要素だけを抜き出したリストを返す even_index(xs).
            最初の要素は 0 番目と数える。"}

 {:problem "整数リスト xs に含まれる偶数だけを抜き出す evens_only(xs)."}

 {:problem "要素 item が m 個あるリストを返す関数 repeat_item(item, m)."
  :test "def test_repeat_item( ):
  assert repeat_item(0, 3) == [0, 0, 0]
  assert repeat_item(0, 0) == []
  assert repeat_item('a', 3) == ['a', 'a', 'a']
  assert repeat_item(0, -1) == []"}

 {:problem "リストxs = [x1, x2, ...] とリストys = [y1, y2, ...] から
            リスト [[x1, y1], [x2, y2], ...] を作る関数 zip(xs, ys)."}

 {:problem "リストをn個ずつのサブリストに分けたリストを返す関数 partition(xs).
            partition([1,2,3,4,5,6], 2) は[[1,2],[3,4],[5,6]] を返す。"}

 {:problem "多次元リストを一次元リストに平くする関数 flatten(xxs).
            flatten([[1,2],[3,4],[5,6]]) は [1,2,3,4,5,6] を返す。"}

 {:problem "リスト xs とリスト ys にともに含まれる要素のリストを返す commons(xs, ys)."}

 {:problem "リスト xs から重複を除いたリストを作って返す distinct(xs)."}

 {:problem "リスト xs とリスト ys から作った重複要素のないリストを返す
           join_distinctly(xs, ys)."}

 {:problem "リスト xs の要素をそれぞれ2個に増やす関数 dupli(xs).
           dupli([1, 2, 3]) は [1, 1, 2, 2, 3, 3] を返す。"}

 {:problem "リスト xs の要素をそれぞれn 個に増やす関数 repli(xs).
            repli([1, 2, 3], 3) は [1, 1, 1, 2, 2, 3, 3, 3, 3] を返す。"}

 {:problem "リスト xs から連続する要素を削除したリストを返す dedupe(xs).
            dedupe([1, 1, 1, 2, 2, 3, 3, 3, 3]) の戻り値は [1, 2, 3]. "}

 {:problem "リスト xs を圧縮する関数 compress(xs).
            compress([3, 3, 3, 'a', 'a', 1, 'b', 'b', 'b']) の戻り値は
            [[3, 3], ['a', 2], [1, 1], ['b', 3]] になる。"}

 {:problem "compress( ) によって圧縮されたリストを元に戻す関数 expand( ).
            expand([[3, 3], ['a', 2], [1, 1], ['b', 3]]) の戻り値は
            [3, 3, 3, 'a', 'a', 1, 'b', b', 'b'] になる。"}

 ;; mathematics
 {:problem "連立方程式 ax + by = c, dx + ey =f を [[a, b, c], [d,e,f]] で表す。
           solve_2([[1, 2, 3], [4, 5, 6]]) により x + 2y = 3, 4x + 5y = 6 の解を
           求める関数 solve_2( )."}

 {:problem "2520 は 1 から 10 の数字のすべての整数で割り切れる最小の整数である。
            1 から 20 までの整数すべてで割り切れる最小の整数は何か？"}

 {:problem "整数 n が平方数であるかどうかを判定する関数 is_square(n).
            237169 は平方数である。"}

 {:problem "整数 n が立方数であるかどうかを判定する関数 is_cubic(n).
            9663597 は立方数である。"}

 {:problem "整数 n が 二つの整数の2乗の和として表されるかどうかを判定する関数
            is_squeare_sum(n).
            is_square_sum(30505) は True を返す。"}

 ;; {:problem "整数 n のルートを超えない最大の整数を返す関数int sqrt_int(int n).
 ;;            sqrt_int(24) の戻り値は4, sqrt_int(25)の戻り値は 5 を期待する。
 ;;            ライブラリ sqrt を使わずに解くこと。"}

 {:problem "1000000 未満の整数で、平方数かつ立方数でもある最大の数は何か。
            square_cubic(int n). square_cubic(1000000) の戻り値はきっと、531***."}

;; {:problem "n を整数とする。factorial(n) + 2 が立方数となるような n を全て求めよ。"}

;; {:problem "ビルトイン関数の sorted( ), list クラスの sort( ) メソッドを使わずに、
;;            リスト xs の要素を小さい順に並べ替えたリストを返す関数 my_sort(xs)
;;            を定義しなさい。"}

 ;; files, csv
 ;; {:problem ""}

 ;; {:problem "ファイル file が何行あるかを返す関数lines(file)を定義しなさい。
 ;;            ファイルa href='000975797.csv'></a> は
 ;;            https://www.city.kitakyushu.lg.jp/soumu/file_0311.html にある
 ;;            北九州市の人口Excel データを csv に変換したものです。
 ;;            ダウンロードし、適当な場所にセーブしてください。
 ;;            ファイル 000975797.csv は何行あるか。"}

 ;; {:problem "ファイル 'numbers.txt' の n 行目の数字を返す関数int nth(int n)."}

 ;; {:problem "ファイル 'numbers.txt' の最初の十行に含まれる整数の総和を返す関数int sum10(void)."}

 ;; {:problem "ファイル 'numbers.txt' の最初の n 行に含まれる整数の総和を返す関数int sum_n(int n)."}

 ;; {:problem "ファイル 'numbers.txt' の最後の n 行に含まれる整数の総和を返す関数int sum_tail(int n)."}

 ;; {:problem "ファイル名を文字列 fname として引数にとり、そのファイルの中身を表示する関数 void cat(char *fname)"}

 ;; {:problem "ファイル名を文字列 fname として引数にとり、そのファイルの中身を行番号つきで表示する関数 void n_cat(char *fname)"}


 ;; recursion
 {:problem "フィボナッチ数列を計算する関数  fibo(n) を定義せよ。
            fibo(0) = 0, fibo(1) = 1, fibo(n) = fibo(n-1) + fibo(n-2)."}

 {:problem "フィボナッチ数列を素早く計算する fast_fibo(n).
            これがないと次の2問は苦しいだろう。"}

 {:problem "フィボナッチ数が最初に n を超えるのはいくらかを求める関数
            fibo_over(n). fibo_over(20000) の戻り値はきっと 23."}

 {:problem "n 以上 m 未満となるフィボナッチ数の総和を返す関数
            sum_fibo_between(n, m).
            sum_fibo_between(10000, 100000) の戻り値は 178700 よりちょっと大きい。"}

 {:problem "n が 1 の時 1、 n が偶数の時 n/2, 奇数の時 3n+1 を返す関数
            int c(int n) を定義せよ。問題はここから。
            その戻り値を再び関数 c( ) の引数とし、同じ計算を繰り返すと、
            どんな n から始めてもいつかは 1 にたどり着くという（Collatz の予想）。
            n から始めて c( ) を繰り返し、1 にたどり着くまでの回数を返す関数
            int collatz(n) を定義し、1 ≤ n ≤ 100 の n について、
            Collatz の予想を確かめよ。
            collatz(n) を最大とする n は何か？
            collatz(1) = 1, collatz(2) = 2 である。"}

 ;; speed
 ;; numpy, 50x faster?
 {:problem "numpy を使わず行列積を求める関数 mat_mul(A, B) を実装しなさい。
            定義した関数と numpy.matmul( ) との速度差はどのくらいか？
            巷では 50 倍とされているが、本当か？
            100x100 の乱数行列で確かめなさい。"}]

 ;; matplotlib
;; {:problem "matplotlib, how to?"}

